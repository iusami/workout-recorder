# Dockerfile.frontend

# --- ステージ 1: ビルダー ---
# Node.js LTS (slim) ベースイメージを選択
FROM node:22.16.0-slim AS builder

# 作業ディレクトリを設定
WORKDIR /app

# Nxのビルドに必要な設定ファイルなどをコピー
COPY package.json package-lock.json* nx.json tsconfig.base.json ./
# もし pnpm や yarn を使う場合は package-lock.json* を適宜変更

# 依存関係をインストール (npmの場合)
RUN npm install --frozen-lockfile

# アプリケーション全体のコードをコピー
COPY . .

# Next.jsアプリケーションをビルド (Standalone出力が有効になっていること)
# --skip-nx-cache はDockerビルド時にはつけることが多いです
RUN npx nx build frontend --skip-nx-cache

# --- ステージ 2: ランタイム ---
# セキュリティ脆弱性が修正されたslimイメージを使用
FROM node:22.16.0-slim

# 作業ディレクトリを設定
WORKDIR /app

# ポートとホスト名の環境変数を設定 (Next.js Standaloneが参照)
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

# ビルダーステージからStandaloneビルドの成果物をコピー
# 1. Standaloneサーバーと依存関係をコピー
COPY --from=builder /app/dist/apps/frontend/.next/standalone ./
# 2. 静的ファイル (.next/static) をコピー
COPY --from=builder /app/dist/apps/frontend/.next/static ./.next/static
# 3. public ディレクトリをコピー
COPY --from=builder /app/dist/apps/frontend/public ./public

# Next.jsがリッスンするポート
EXPOSE 3000

# Standaloneサーバーを起動
CMD ["node", "apps/frontend/server.js"]
# CMD ["ls", "-lAR", "/app"]